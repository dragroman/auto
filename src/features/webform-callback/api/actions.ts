"use server"

import { drupal } from "@shared/lib/drupal"
import { sendTelegramMessage } from "@shared/lib/telegram"
import {
  callbackFormSchema,
  type CallbackFormSchema,
} from "../model/formSchema"
import { getServerSession } from "next-auth"
import { authOptions } from "@features/auth/session"

export async function submitWebformAction(data: CallbackFormSchema) {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    const validatedData = callbackFormSchema.parse(data)

    const url = drupal.buildUrl("/webform_rest/submit")

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    const headers: Record<string, string> = {
      "Content-Type": "application/json",
    }

    // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ —Å–µ—Å—Å–∏–∏ (NextAuth.js)
    let currentUser = null
    try {
      const session = await getServerSession(authOptions)
      if (session?.accessToken) {
        headers.Authorization = `Bearer ${session.accessToken}`
        currentUser = session.user
      }
    } catch {
      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ —Ç–æ–∫–µ–Ω–∞
    }

    // Submit to Drupal
    const result = await drupal.fetch(url.toString(), {
      method: "POST",
      body: JSON.stringify({
        webform_id: "callback",
        phone: validatedData.phone,
        name: validatedData.name,
        node_id: validatedData.nodeId,
      }),
      headers,
    })

    if (!result.ok) {
      const errorData = await result.text()
      console.error("Drupal error:", errorData)
      throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã –≤ Drupal")
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram (–±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è)
    sendCallbackNotificationToTelegram(validatedData, currentUser)

    return { success: true }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞:", error)

    if (error instanceof Error) {
      return { success: false, error: error.message }
    }

    return { success: false, error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞" }
  }
}

async function sendCallbackNotificationToTelegram(
  formData: CallbackFormSchema,
  user: any
) {
  const userName = user?.name || user?.email || "–ê–Ω–æ–Ω–∏–º–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
  const customerName = formData.name || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
  const nodeInfo = formData.nodeId
    ? `\nüöó <b>–†–∞—Å—á–µ—Ç ID:</b> ${formData.nodeId}`
    : ""

  const message = `
üìû <b>–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞!</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${userName}
üìù <b>–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞:</b> ${customerName}
üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> ${formData.phone}
<b>Node id:</b> ${nodeInfo}

#–æ–±—Ä–∞—Ç–Ω—ã–π–∑–≤–æ–Ω–æ–∫ #–∑–∞—è–≤–∫–∞
  `.trim()

  try {
    await sendTelegramMessage(message)
  } catch (error) {
    console.error(
      "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ callback –≤ Telegram:",
      error
    )
  }
}
