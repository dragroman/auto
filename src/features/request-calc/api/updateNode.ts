"use server"

import { authOptions } from "@features/auth/session"
import { drupal } from "@shared/lib/drupal"
import { sendTelegramMessage } from "@shared/lib/telegram"
import { getServerSession } from "next-auth"
import { revalidateTag } from "next/cache"

type NodeUpdateData = {
  field_model: string
  field_remarks?: string
}

export async function updateNodeDataAction(
  nodeId: string,
  nodeType: string,
  updateData: NodeUpdateData
) {
  try {
    const session = await getServerSession(authOptions)

    if (!session?.accessToken) {
      throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω")
    }

    const currentNode = await drupal.getResource(nodeType, nodeId, {
      withAuth: () => `Bearer ${session.accessToken}`,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    if (currentNode.field_status === "requested") {
      return {
        success: false,
        error: "–ó–∞—è–≤–∫–∞ —É–∂–µ –ø–æ–¥–∞–Ω–∞ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏",
      }
    }

    const dataToUpdate = {
      ...updateData,
      field_status: "requested",
    }

    const updatedNode = await drupal.updateResource(
      nodeType,
      nodeId,
      {
        data: {
          attributes: dataToUpdate,
        },
      },
      {
        withAuth: () => `Bearer ${session.accessToken}`,
      }
    )

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram (–±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è)
    sendNotificationToTelegram(updatedNode, session.user)

    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –¥–ª—è —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    revalidateTag("calculations")
    revalidateTag("user_stats")

    return { success: true, node: updatedNode }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–¥—ã:", error)

    if (error instanceof Error) {
      return { success: false, error: error.message }
    }

    return { success: false, error: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏" }
  }
}

async function sendNotificationToTelegram(node: any, user: any) {
  const chatId = process.env.TELEGRAM_CHAT_ID

  if (!chatId) {
    console.warn("TELEGRAM_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    return
  }

  const userName = user?.name || user?.email || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
  const nodeName = node.title || `–†–∞—Å—á–µ—Ç #${node.id}`

  const message = `
üöó <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–∞—Å—á–µ—Ç!</b>

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${userName}
üìã <b>–†–∞—Å—á–µ—Ç:</b> ${nodeName}
üöô <b>–ú–æ–¥–µ–ª—å:</b> ${node.field_model || "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}
üí¨ <b>–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</b> ${node.field_remarks || "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"}

#–∑–∞—è–≤–∫–∞ #—Ä–∞—Å—á–µ—Ç
  `.trim()

  try {
    await sendTelegramMessage(message)
  } catch (error) {
    console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram:", error)
  }
}
